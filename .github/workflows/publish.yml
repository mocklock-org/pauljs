name: Publish Package to npmjs
on:
  release:
    types: [created]
  workflow_run:
    workflows: ["pauljs Version Control and Release Notes"]
    types:
      - completed
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'release' }}
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          always-auth: true
      
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: npm run build
      
      - name: Verify npm token
        run: |
          if [ -z "$NODE_AUTH_TOKEN" ]; then
            echo "Error: NPM_TOKEN is not set"
            exit 1
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Determine Tag
        id: determine-tag
        run: |
          VERSION=$(node -p "require('./package.json').version")
          if [[ "$VERSION" == 1.* ]]; then
            echo "tag=wormhole" >> $GITHUB_OUTPUT
          elif [[ "$VERSION" == 2.* ]]; then
            echo "tag=event-horizon" >> $GITHUB_OUTPUT
          elif [[ "$VERSION" == 3.* ]]; then
            echo "tag=neutron" >> $GITHUB_OUTPUT
          elif [[ "$VERSION" == 4.* ]]; then
            echo "tag=quasar" >> $GITHUB_OUTPUT
          elif [[ "$VERSION" == 5.* ]]; then
            echo "tag=nova" >> $GITHUB_OUTPUT
          elif [[ "$VERSION" == 6.* ]]; then
            echo "tag=cosmos-2025" >> $GITHUB_OUTPUT
          elif [[ "$VERSION" == 7.* ]]; then
            echo "tag=singularity" >> $GITHUB_OUTPUT
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
          fi
      
      - name: Publish to npm
        run: |
          npm publish --provenance --access public --tag ${{ steps.determine-tag.outputs.tag }}
          
          # For experimental builds, also tag as wormhole
          if [[ $(node -p "require('./package.json').version") == *"-alpha"* ]]; then
            npm dist-tag add pauljs@$(node -p "require('./package.json').version") wormhole
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Log publish status
        run: |
          echo "Package published successfully"
          echo "Version: $(node -p "require('./package.json').version")"
          echo "Name: $(node -p "require('./package.json').name")"
          echo "Tag: ${{ steps.determine-tag.outputs.tag }}" 