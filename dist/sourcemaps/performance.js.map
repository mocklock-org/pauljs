"{\"version\":3,\"names\":[\"path\",\"require\",\"fs\",\"promises\",\"createHash\",\"sharp\",\"csso\",\"minify\",\"generateHash\",\"content\",\"update\",\"digest\",\"slice\",\"async\",\"optimizeImage\",\"inputPath\",\"outputPath\",\"options\",\"quality\",\"width\",\"height\",\"format\",\"image\",\"resize\",\"fit\",\"withoutEnlargement\",\"toFormat\",\"lossless\",\"effort\",\"toFile\",\"responsiveImages\",\"Promise\",\"all\",\"map\",\"resizedPath\",\"replace\",\"size\",\"originalPath\",\"optimizeCSS\",\"css\",\"_objectSpread\",\"sourceMap\",\"filename\",\"optimizeJS\",\"js\",\"code\",\"createManifest\",\"assets\",\"manifest\",\"version\",\"process\",\"env\",\"npm_package_version\",\"key\",\"Object\",\"entries\",\"hash\",\"ext\",\"extname\",\"newPath\",\"writeFile\",\"JSON\",\"stringify\",\"wrapWithLazyLoading\",\"componentCode\",\"splitComponent\",\"componentPath\",\"readFile\",\"chunks\",\"currentChunk\",\"chunkSize\",\"line\",\"split\",\"lineSize\",\"Buffer\",\"from\",\"length\",\"push\",\"entryPoint\",\"_\",\"i\",\"join\",\"module\",\"exports\"],\"sources\":[\"performance.js\"],\"sourcesContent\":[\"const path = require('path');\\r\\nconst fs = require('fs').promises;\\r\\nconst { createHash } = require('crypto');\\r\\nconst sharp = require('sharp');\\r\\nconst csso = require('csso');\\r\\nconst { minify } = require('terser');\\r\\n\\r\\nfunction generateHash(content) {\\r\\n  return createHash('md5').update(content).digest('hex').slice(0, 8);\\r\\n}\\r\\n\\r\\nasync function optimizeImage(inputPath, outputPath, options = {}) {\\r\\n  const {\\r\\n    quality = 80,\\r\\n    width = null,\\r\\n    height = null,\\r\\n    format = 'webp'\\r\\n  } = options;\\r\\n\\r\\n  const image = sharp(inputPath);\\r\\n  \\r\\n  if (width || height) {\\r\\n    image.resize(width, height, {\\r\\n      fit: 'inside',\\r\\n      withoutEnlargement: true\\r\\n    });\\r\\n  }\\r\\n\\r\\n  await image.toFormat(format, { quality })[format]({\\r\\n    quality,\\r\\n    lossless: false,\\r\\n    effort: 6\\r\\n  }).toFile(outputPath);\\r\\n\\r\\n  const sizes = [320, 640, 1024, 1920];\\r\\n  const responsiveImages = await Promise.all(\\r\\n    sizes.map(async size => {\\r\\n      const resizedPath = outputPath.replace(/\\\\.[^.]+$/, `-${size}.${format}`);\\r\\n      await image\\r\\n        .resize(size, null, { fit: 'inside', withoutEnlargement: true })\\r\\n        .toFormat(format, { quality })\\r\\n        .toFile(resizedPath);\\r\\n      return { size, path: resizedPath };\\r\\n    })\\r\\n  );\\r\\n\\r\\n  return {\\r\\n    originalPath: outputPath,\\r\\n    responsiveImages\\r\\n  };\\r\\n}\\r\\n\\r\\nfunction optimizeCSS(css, options = {}) {\\r\\n  const result = csso.minify(css, {\\r\\n    sourceMap: options.sourceMap,\\r\\n    filename: options.filename,\\r\\n    ...options\\r\\n  });\\r\\n  return result.css;\\r\\n}\\r\\n\\r\\nasync function optimizeJS(js, options = {}) {\\r\\n  const result = await minify(js, {\\r\\n    sourceMap: options.sourceMap,\\r\\n    ...options\\r\\n  });\\r\\n  return result.code;\\r\\n}\\r\\n\\r\\nasync function createManifest(assets, outputPath) {\\r\\n  const manifest = {\\r\\n    version: process.env.npm_package_version,\\r\\n    assets: {}\\r\\n  };\\r\\n\\r\\n  for (const [key, content] of Object.entries(assets)) {\\r\\n    const hash = generateHash(content);\\r\\n    const ext = path.extname(key);\\r\\n    const newPath = key.replace(ext, `-${hash}${ext}`);\\r\\n    manifest.assets[key] = newPath;\\r\\n  }\\r\\n\\r\\n  await fs.writeFile(outputPath, JSON.stringify(manifest, null, 2));\\r\\n  return manifest;\\r\\n}\\r\\n\\r\\nfunction wrapWithLazyLoading(componentCode) {\\r\\n  return `\\r\\n    const React = require('react');\\r\\n    const { lazy, Suspense } = React;\\r\\n\\r\\n    const LazyComponent = lazy(() => new Promise(resolve => {\\r\\n      const delay = process.env.NODE_ENV === 'development' ? 1000 : 0;\\r\\n      setTimeout(() => {\\r\\n        resolve({\\r\\n          default: (function() {\\r\\n            ${componentCode}\\r\\n          })()\\r\\n        });\\r\\n      }, delay);\\r\\n    }));\\r\\n\\r\\n    module.exports = function(props) {\\r\\n      return (\\r\\n        <Suspense fallback={<div>Loading...</div>}>\\r\\n          <LazyComponent {...props} />\\r\\n        </Suspense>\\r\\n      );\\r\\n    };\\r\\n  `;\\r\\n}\\r\\n\\r\\nasync function splitComponent(componentPath) {\\r\\n  const content = await fs.readFile(componentPath, 'utf8');\\r\\n  const chunks = [];\\r\\n  let currentChunk = '';\\r\\n  let chunkSize = 0;\\r\\n\\r\\n  const MAX_CHUNK_SIZE = 50 * 1024;\\r\\n\\r\\n  for (const line of content.split('\\\\n')) {\\r\\n    const lineSize = Buffer.from(line).length;\\r\\n    if (chunkSize + lineSize > MAX_CHUNK_SIZE) {\\r\\n      chunks.push(currentChunk);\\r\\n      currentChunk = line;\\r\\n      chunkSize = lineSize;\\r\\n    } else {\\r\\n      currentChunk += line + '\\\\n';\\r\\n      chunkSize += lineSize;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  if (currentChunk) {\\r\\n    chunks.push(currentChunk);\\r\\n  }\\r\\n\\r\\n  return {\\r\\n    chunks,\\r\\n    entryPoint: `\\r\\n      const chunks = [\\r\\n        ${chunks.map((_, i) => `() => import('./chunk${i}.js')`).join(',\\\\n')}\\r\\n      ];\\r\\n      \\r\\n      module.exports = async function loadComponent() {\\r\\n        const loadedChunks = await Promise.all(chunks.map(chunk => chunk()));\\r\\n        return loadedChunks.reduce((merged, chunk) => ({\\r\\n          ...merged,\\r\\n          ...chunk.default\\r\\n        }), {});\\r\\n      };\\r\\n    `\\r\\n  };\\r\\n}\\r\\n\\r\\nmodule.exports = {\\r\\n  optimizeImage,\\r\\n  optimizeCSS,\\r\\n  optimizeJS,\\r\\n  createManifest,\\r\\n  wrapWithLazyLoading,\\r\\n  splitComponent,\\r\\n  generateHash\\r\\n};\"],\"mappings\":\"kzBAAA,MAAMA,KAAOC,QAAQ,QACfC,GAAKD,QAAQ,MAAME,UACnBC,WAAEA,YAAeH,QAAQ,UACzBI,MAAQJ,QAAQ,SAChBK,KAAOL,QAAQ,SACfM,OAAEA,QAAWN,QAAQ,UAE3B,SAASO,aAAaC,GACpB,OAAOL,WAAW,OAAOM,OAAOD,GAASE,OAAO,OAAOC,MAAM,EAAG,EAClE,CAEAC,eAAeC,cAAcC,EAAWC,EAAYC,EAAU,CAAC,GAC7D,MAAMC,QACJA,EAAU,GAAEC,MACZA,EAAQ,KAAIC,OACZA,EAAS,KAAIC,OACbA,EAAS,QACPJ,EAEEK,EAAQjB,MAAMU,IAEhBI,GAASC,IACXE,EAAMC,OAAOJ,EAAOC,EAAQ,CAC1BI,IAAK,SACLC,oBAAoB,UAIlBH,EAAMI,SAASL,EAAQ,CAAEH,YAAWG,GAAQ,CAChDH,UACAS,UAAU,EACVC,OAAQ,IACPC,OAAOb,GAEV,MACMc,QAAyBC,QAAQC,IADzB,CAAC,IAAK,IAAK,KAAM,MAEvBC,KAAIpB,UACR,MAAMqB,EAAclB,EAAWmB,QAAQ,WAAY,IAAIC,KAAQf,KAK/D,aAJMC,EACHC,OAAOa,EAAM,KAAM,CAAEZ,IAAK,SAAUC,oBAAoB,IACxDC,SAASL,EAAQ,CAAEH,YACnBW,OAAOK,GACH,CAAEE,OAAMpC,KAAMkC,OAIzB,MAAO,CACLG,aAAcrB,EACdc,mBAEJ,CAEA,SAASQ,YAAYC,EAAKtB,EAAU,CAAC,GAMnC,OALeX,KAAKC,OAAOgC,EAAGC,cAAA,CAC5BC,UAAWxB,EAAQwB,UACnBC,SAAUzB,EAAQyB,UACfzB,IAESsB,GAChB,CAEA1B,eAAe8B,WAAWC,EAAI3B,EAAU,CAAC,GAKvC,aAJqBV,OAAOqC,EAAEJ,cAAA,CAC5BC,UAAWxB,EAAQwB,WAChBxB,KAES4B,IAChB,CAEAhC,eAAeiC,eAAeC,EAAQ/B,GACpC,MAAMgC,EAAW,CACfC,QAASC,QAAQC,IAAIC,oBACrBL,OAAQ,CAAC,GAGX,IAAK,MAAOM,EAAK5C,KAAY6C,OAAOC,QAAQR,GAAS,CACnD,MAAMS,EAAOhD,aAAaC,GACpBgD,EAAMzD,KAAK0D,QAAQL,GACnBM,EAAUN,EAAIlB,QAAQsB,EAAK,IAAID,IAAOC,KAC5CT,EAASD,OAAOM,GAAOM,CACzB,CAGA,aADMzD,GAAG0D,UAAU5C,EAAY6C,KAAKC,UAAUd,EAAU,KAAM,IACvDA,CACT,CAEA,SAASe,oBAAoBC,GAC3B,MAAO,qTASKA,8PAcd,CAEAnD,eAAeoD,eAAeC,GAC5B,MAAMzD,QAAgBP,GAAGiE,SAASD,EAAe,QAC3CE,EAAS,GACf,IAAIC,EAAe,GACfC,EAAY,EAIhB,IAAK,MAAMC,KAAQ9D,EAAQ+D,MAAM,MAAO,CACtC,MAAMC,EAAWC,OAAOC,KAAKJ,GAAMK,OAC/BN,EAAYG,EAJK,OAKnBL,EAAOS,KAAKR,GACZA,EAAeE,EACfD,EAAYG,IAEZJ,GAAgBE,EAAO,KACvBD,GAAaG,EAEjB,CAMA,OAJIJ,GACFD,EAAOS,KAAKR,GAGP,CACLD,SACAU,WAAY,qCAENV,EAAOnC,KAAI,CAAC8C,EAAGC,IAAM,wBAAwBA,WAAUC,KAAK,iTAYtE,CAEAC,OAAOC,QAAU,CACfrE,4BACAwB,wBACAK,sBACAG,8BACAiB,wCACAE,8BACAzD\",\"ignoreList\":[]}"